void orthonormalization(double *arr, int n){
    double normalize = sqrt(Scalar_product(n, arr, arr));
    for (int i = 0; i < n; i++){
        arr[i] = arr[i]/normalize;
    }
}

void print_matrix(double **arr, int k, int n) {
    for (int i = 0; i < k; i++) {
        for (int j = 0; j < n; j++) {
            printf("%lf ", arr[i][j]);
        }
        printf("\n");
    }
}


int GS_orth(int n, int k, double **arr){
    int n1 = 0;
    for (int i = 0; i < k; i++){
        for (int j = 0; j < i; j++){
            double sum = Scalar_product(n, arr[i], arr[j]);
            for (int m = 0; m < n; m++){
                arr[i][m] -= sum * arr[j][m];
            }
        }
        n1++;
        orthonormalization(arr[i], n);
    }
    return n1;
}

int main(){
    int i, j;
    int n1 = 0;
    int k;//строки
    int n;//столбцы
    scanf("%d", &k);
    scanf("%d", &n);
    double **mat = (double**) malloc(k*sizeof(double*));
    for (i = 0; i < k; i++){
        mat[i] = (double*) malloc(n*sizeof(double));
    }
    for (i = 0; i < k; i++){
        for (j = 0; j < n; j++){
            scanf("%lf", &mat[i][j]);
        }
    }
    n1 = GS_orth(n, k, mat);
    print_matrix(mat, k, n);
    for (int i = 0; i < k; i++){
        free(mat[i]);
    }
    free(mat);
    printf("%d", n1);
    return 0;
}